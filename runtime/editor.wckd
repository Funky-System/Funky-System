import draw
import input
import fs
import color

import editor_state

import editor_code
import editor_gfx

import editor_prompt
import editor_msgbox

function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

enum Modes
    Code, Gfx, Map, Sfx, Music
end

var mode = Modes.Code

class BarButton
    var caption = ""
    var x, y, w, h
    var bgUp, bgDown

    function new(x, y, w, h, caption = "", bgUp = color.Names.Gray, bgDown = color.Names.DarkGray)
        this.caption = caption
        this.x = x ; this.y = y ; this.w = w ; this.h = h
        this.bgUp = bgUp ; this.bgDown = bgDown
    end

    function draw(down = false)
        if down then
            draw.fillRect(this.x, this.y, this.w, this.h - 1, this.bgDown) # fill
            #draw.fillRect(this.x, this.y, this.w, 1, color.Names.DarkGray) # top
            #draw.fillRect(this.x, this.y, 1, this.h , color.Names.DarkGray) # left
            #draw.fillRect(this.x + this.w, this.y, 1, this.h + 1, color.Names.LightGray) # right
            draw.fillRect(this.x, this.y + this.h - 1, this.w, 1, color.Names.LightGray) # bottom
            draw.setFont("7px")
            draw.text(this.x + 3, this.y + 3, this.caption, color.Names.White)
        else
            draw.fillRect(this.x, this.y, this.w, this.h, this.bgUp) # fill
            #draw.fillRect(this.x, this.y, this.w, 1, color.Names.LightGray) # top
            #draw.fillRect(this.x, this.y, 1, this.h, color.Names.LightGray) # left
            #draw.fillRect(this.x + this.w, this.y, 1, this.h + 1, color.Names.DarkGray) # right
            #draw.fillRect(this.x, this.y + this.h, this.w, 1, color.Names.DarkGray) # bottom
            draw.setFont("7px")
            draw.text(this.x + 3, this.y + 3, this.caption, color.Names.White)
        end
    end

    function hitTest(down, x, y)
        if x >= this.x && x <= this.x + this.w && leftButtonDownOnX >= this.x && leftButtonDownOnX <= this.x + this.w then
            if y >= this.y && y <= this.y + this.h  && leftButtonDownOnY >= this.y && leftButtonDownOnY <= this.y + this.h then
                if down then
                    this.draw(true)
                else
                    debug_print("click " + this.caption + "\n")
                    this.draw(true)
                end
                return true
            end
        end
        return false
    end
end

var codeButton = new BarButton(2, 2, 20, 12, "P", color.Names.Gray, color.Names.DarkGray)
var gfxButton = new BarButton(24, 2, 20, 12, "G", color.Names.Gray, color.Names.DarkGray)
var mapButton = new BarButton(46, 2, 20, 12, "M", color.Names.Gray, color.Names.DarkGray)
var sfxButton = new BarButton(68, 2, 20, 12, "S", color.Names.Gray, color.Names.DarkGray)
var musicButton = new BarButton(90, 2, 20, 12, "M", color.Names.Gray, color.Names.DarkGray)

var leftButtonDown = false
var leftButtonDownOnX = -1, leftButtonDownOnY = -1

export function update()
    draw.cls(color.Names.Black)

    handle_input()

    # editor BG
    draw.fillRect(0, 16, 256, 180, color.Names.DarkGray)

    if mode == Modes.Code then editor_code.editor_draw() ;
    if mode == Modes.Gfx then editor_gfx.editor_draw() ;

    # tabbar
    var barColor = color.Names.BlueGray

    draw.fillRect(0, 0, 256, 16, barColor) # background
    codeButton.draw(mode == Modes.Code)
    gfxButton.draw(mode == Modes.Gfx)
    mapButton.draw(mode == Modes.Map)
    sfxButton.draw(mode == Modes.Sfx)
    musicButton.draw(mode == Modes.Music)

    var mouse_x = input.mouseX(), mouse_y = input.mouseY()
    codeButton.hitTest(true, mouse_x, mouse_y)
    gfxButton.hitTest(true, mouse_x, mouse_y)
    mapButton.hitTest(true, mouse_x, mouse_y)
    sfxButton.hitTest(true, mouse_x, mouse_y)
    musicButton.hitTest(true, mouse_x, mouse_y)

    draw.setFont("9px")
    draw.text(256 - 6 - draw.textWidth(editor_state.getProjectName()), 4, editor_state.getProjectName(), color.Names.LightGray)

    if input.keyPress(input.Keys.Escape) then
        # return true
    end

    if input.keyPress(input.Keys.R) && input.key(input.Keys.Ctrl) then
        debug_print("Run program\n")
        run()
    end


    if rename_prompt != empty && renameMsgbox == empty then
        rename_prompt.draw()
        rename_prompt.update()
    end

    if renameMsgbox != empty then
        renameMsgbox.draw()
        renameMsgbox.update()
    end
end

var rename_prompt = empty

function handle_input()
    if rename_prompt != empty || renameMsgbox != empty then
        return
    end

    if mode == Modes.Code then editor_code.editor_update() ;
    if mode == Modes.Gfx then editor_gfx.editor_update() ;

    var mouse_x = input.mouseX(), mouse_y = input.mouseY()
    if input.leftButtonPressed() then
        if !leftButtonDown then
            leftButtonDownOnX = mouse_x
            leftButtonDownOnY = mouse_y
            leftButtonDown = true
        end
        codeButton.hitTest(true, mouse_x, mouse_y)
        gfxButton.hitTest(true, mouse_x, mouse_y)
        mapButton.hitTest(true, mouse_x, mouse_y)
        sfxButton.hitTest(true, mouse_x, mouse_y)
        musicButton.hitTest(true, mouse_x, mouse_y)
    else if leftButtonDown then
        leftButtonDown = false
        if codeButton.hitTest(false, mouse_x, mouse_y) then mode = Modes.Code ;
        if gfxButton.hitTest(false, mouse_x, mouse_y) then mode = Modes.Gfx ;
        if mapButton.hitTest(false, mouse_x, mouse_y) then mode = Modes.Map ;
        if sfxButton.hitTest(false, mouse_x, mouse_y) then mode = Modes.Sfx ;
        if musicButton.hitTest(false, mouse_x, mouse_y) then mode = Modes.Music ;

        if mouse_x > 150 && mouse_y <= 16 && leftButtonDownOnX > 150 && leftButtonDownOnY <= 16 then
            var title = editor_state.getProjectName()
            if title == "(unnamed)" then title = ""
            rename_prompt = new editor_prompt.Prompt("Save project as:", renameProject, title)
        end
    end
end

function run(path)
#    var updateFun
#    asm "
#        ld.arg 0
#        link.pop
#        dup
#        ld.mapitem \"@init\"
#        call.pop 0
#        ld.mapitem \"fupdate\"
#        is.empty
#        brtrue skipUpdate
#        st.local 1
#        exe_loop:
#        ld.local 1
#        call.pop 0
#        ld.reg %rr
#        brtrue skipUpdate
#        call pump_events, 0
#        jmp exe_loop
#        skipUpdate:
#        pop
#        ld.arg 0
#        unlink.pop
#    "
end

function renameProject(name)
    if name == empty then
        rename_prompt = empty
        return
    end
    name = name.trim()
    if name == "" || name == editor_state.getProjectName() then
        rename_prompt = empty
        return
    end

    if !fs.exists("funky-projects") then fs.mkdir("funky-projects")

#    var dir = fs.dir("funky-projects")
#    for file in dir do
#        debug_print(file + "\n")
#    end

    rename_name = name

    if fs.exists("funky-projects/" + name) then
        renameMsgbox = new editor_msgbox.Msgbox(name + " already exists", doRenameProject, "Overwrite", "Back")
    else
        doRenameProject()
    end
end

var renameMsgbox = empty
var rename_name = ""

function doRenameProject(res = true)
    renameMsgbox = empty
    if !res then return;


    if fs.exists("funky-projects/" + rename_name) then
        fs.rmdir("funky-projects/" + rename_name, true)
    end

    if editor_state.getProjectName() == "(unnamed)" then
        fs.rename("funky-projects/.temp", "funky-projects/" + rename_name)
    else
        fs.rename("funky-projects/" + editor_state.getProjectName(), "funky-projects/" + rename_name)
    end

    editor_state.setProjectName(rename_name)
    rename_prompt = empty
end

if !fs.exists("funky-projects") then fs.mkdir("funky-projects")
if fs.exists("funky-projects/.temp") then fs.rmdir("funky-projects/.temp", true)
fs.mkdir("funky-projects/.temp")
