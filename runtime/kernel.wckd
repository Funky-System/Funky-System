import stdlib
import draw
import color
import input
import timer
import console
import keyboard

var shiftTable = keyboard.getShiftTable()
var colors = color.Names

function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

function pump_events()
    asm "syscall.byname \"pump_events\""
end


draw.setFont("9px")
draw.setColor(colors.White)
var fontHeight = 9

var numRows = 192 / (fontHeight + 1)
var rows = []
rows[numRows - 1] = empty # create elements

for i in 0..numRows - 1 do
    rows[i] = ""
end

rows[0] = "Funky System 2018.1"
rows[1] = ""
rows[2] = "READY"
rows[3] = "# "

function print(str)
    rows[cursor_y] = rows[cursor_y][0:cursor_x] + str
    cursor_x += rows[cursor_y].length()
end

function newLine()
    cursor_y += 1
    cursor_x = 0
    if cursor_y > numRows - 1 then
        rows.deleteAt(0)
        cursor_y = numRows - 1
        rows[cursor_y] = ""
    end
end

function printLine(line)
    print(line)
    newLine()
end

function module_exists(name)
    var ret = 0
    asm "
        ld.arg 0
        mod.exists
        st.local 1
    "
    return ret
end

function module_loaded(name)
    var ret = 0
    asm "
        ld.arg 0
        mod.isloaded
        st.local 1
    "
    return ret
end

function load_exe(cmd)
    var updateFun
    asm "
        ld.arg 0
        link.pop
        dup
        ld.mapitem \"@init\"
        call.pop 0
        ld.mapitem \"fupdate\"
        is.empty
        brtrue skipUpdate
        st.local 1
        exe_loop:
        ld.local 1
        call.pop 0
        ld.reg %rr
        brtrue skipUpdate
        call pump_events, 0
        jmp exe_loop
        skipUpdate:
        pop
        ld.arg 0
        unlink.pop
    "
end

var commandHistory = []
var commandHistoryIndex = 0
function processCommand(cmd)
    commandHistory[] = cmd
    debug_print(cmd + "\n")

    newLine()

    if cmd == "" then
        # do nothing
    else if cmd == "exit" then
         running = false
    else if cmd == "test" then
        console._setRows(rows)
        console.setCursorPos(cursor_x, cursor_y)

        console.printLine("Test 123")

        cursor_x = console.getCursorPos().x
        cursor_y = console.getCursorPos().y
        rows = console._getRows()
    else
        if module_exists(cmd) && !module_loaded(cmd) then
            console._setRows(rows)
            console.setCursorPos(cursor_x, cursor_y)
            load_exe(cmd)
            cursor_x = console.getCursorPos().x
            cursor_y = console.getCursorPos().y
            rows = console._getRows()
        else
            printLine(cmd + ": Command not found")
        end
    end

    print("# ")
    commandHistoryIndex = 0
end

var autocomplete_commands = ["exit", "test", "long_command"]

function autocomplete()
    var stringToCursor = rows[cursor_y][2:cursor_x]
    for cmd in autocomplete_commands do
        if cmd.startsWith(stringToCursor) then
            var stringFromCursor = rows[cursor_y][cursor_x:-1]
            rows[cursor_y] = rows[cursor_y][0:2] + cmd + stringFromCursor
            cursor_x = cmd.length() + 2
            return
        end
    end
end

function processInput(c)
    lastKeyPress = timer.getTicks()
    if c == "left" then
        cursor_x -= 1
        if cursor_x < 2 then
            cursor_x = 2
        end
    else if c == "right" then
        cursor_x += 1
        if cursor_x > rows[cursor_y].length() then
            cursor_x = rows[cursor_y].length()
        end
    else if c == "backspace" then
        if cursor_x > 2 then
            rows[cursor_y] = rows[cursor_y][0:cursor_x - 1] + rows[cursor_y][cursor_x:-1]
            cursor_x -= 1
        end
    else if c == "home" then
        cursor_x = 2
    else if c == "end" then
        cursor_x = rows[cursor_y].length()
    else if c == "delete" then
        if cursor_x < rows[cursor_y].length() then
            rows[cursor_y] = rows[cursor_y][0:cursor_x] + rows[cursor_y][cursor_x + 1:-1]
        end
    else if c == "up" then
        commandHistoryIndex += 1
        if (commandHistoryIndex > commandHistory.length()) then commandHistoryIndex = commandHistory.length()
        rows[cursor_y] = "# "
        if commandHistoryIndex >= 1 then
             rows[cursor_y] += commandHistory[commandHistory.length() - commandHistoryIndex]
        end
        cursor_x = rows[cursor_y].length()
    else if c == "down" then
        commandHistoryIndex -= 1
        if (commandHistoryIndex < 0) then commandHistoryIndex = 0
        rows[cursor_y] = "# "
        if commandHistoryIndex >= 1 then
             rows[cursor_y] += commandHistory[commandHistory.length() - commandHistoryIndex]
        end
        cursor_x = rows[cursor_y].length()
    else if c == "return" then
        processCommand(rows[cursor_y][2:-1])
    else if c == "tab" then
        autocomplete()
    else
        var c_tmp = c
        if input.key(input.Keys.Rshift) || input.key(input.Keys.Lshift) then
            c_tmp = shiftTable[c]
        end
        #debug_print(c[0] + "\n")
        if c_tmp != empty then
            rows[cursor_y] = rows[cursor_y][0:cursor_x] + c_tmp + rows[cursor_y][cursor_x:-1]
            cursor_x += 1
        end
    end
end

function checkInput()
    if input.keyPress(input.Keys.A) then processInput("a")
    if input.keyPress(input.Keys.B) then processInput("b")
    if input.keyPress(input.Keys.C) then processInput("c")
    if input.keyPress(input.Keys.D) then processInput("d")
    if input.keyPress(input.Keys.E) then processInput("e")
    if input.keyPress(input.Keys.F) then processInput("f")
    if input.keyPress(input.Keys.G) then processInput("g")
    if input.keyPress(input.Keys.H) then processInput("h")
    if input.keyPress(input.Keys.I) then processInput("i")
    if input.keyPress(input.Keys.J) then processInput("j")
    if input.keyPress(input.Keys.K) then processInput("k")
    if input.keyPress(input.Keys.L) then processInput("l")
    if input.keyPress(input.Keys.M) then processInput("m")
    if input.keyPress(input.Keys.N) then processInput("n")
    if input.keyPress(input.Keys.O) then processInput("o")
    if input.keyPress(input.Keys.P) then processInput("p")
    if input.keyPress(input.Keys.Q) then processInput("q")
    if input.keyPress(input.Keys.R) then processInput("r")
    if input.keyPress(input.Keys.S) then processInput("s")
    if input.keyPress(input.Keys.T) then processInput("t")
    if input.keyPress(input.Keys.U) then processInput("u")
    if input.keyPress(input.Keys.V) then processInput("v")
    if input.keyPress(input.Keys.W) then processInput("w")
    if input.keyPress(input.Keys.X) then processInput("x")
    if input.keyPress(input.Keys.Y) then processInput("y")
    if input.keyPress(input.Keys.Z) then processInput("z")
    if input.keyPress(input.Keys.Num1) then processInput("1")
    if input.keyPress(input.Keys.Num2) then processInput("2")
    if input.keyPress(input.Keys.Num3) then processInput("3")
    if input.keyPress(input.Keys.Num4) then processInput("4")
    if input.keyPress(input.Keys.Num5) then processInput("5")
    if input.keyPress(input.Keys.Num6) then processInput("6")
    if input.keyPress(input.Keys.Num7) then processInput("7")
    if input.keyPress(input.Keys.Num8) then processInput("8")
    if input.keyPress(input.Keys.Num9) then processInput("9")
    if input.keyPress(input.Keys.Num0) then processInput("0")
    if input.keyPress(input.Keys.Space) then processInput(" ")
    if input.keyPress(input.Keys.Minus) then processInput("-")
    if input.keyPress(input.Keys.Equals) then processInput("=")
    if input.keyPress(input.Keys.Leftbracket) then processInput("[")
    if input.keyPress(input.Keys.Rightbracket) then processInput("]")
    if input.keyPress(input.Keys.Semicolon) then processInput(";")
    if input.keyPress(input.Keys.Apostrophe) then processInput("'")
    if input.keyPress(input.Keys.Backslash) then processInput("\\")
    if input.keyPress(input.Keys.Comma) then processInput(",")
    if input.keyPress(input.Keys.Period) then processInput(".")
    if input.keyPress(input.Keys.Slash) then processInput("/")
    if input.keyPress(input.Keys.Grave) then processInput("`")
    if input.keyPress(input.Keys.Tab) then processInput("tab")

    if input.keyPress(input.Keys.Left) then processInput("left")
    if input.keyPress(input.Keys.Right) then processInput("right")
    if input.keyPress(input.Keys.Home) then processInput("home")
    if input.keyPress(input.Keys.End) then processInput("end")
    if input.keyPress(input.Keys.Up) then processInput("up")
    if input.keyPress(input.Keys.Down) then processInput("down")
    if input.keyPress(input.Keys.Backspace) then processInput("backspace")
    if input.keyPress(input.Keys.Delete) then processInput("delete")

    if input.keyPress(input.Keys.Return) then processInput("return")
end

var cursor_x = 2, cursor_y = 3

var running = true
var lastKeyPress = -100000
while running do
    checkInput()

    draw.cls(colors.Black)

    if input.key(input.Keys.Z) then
        draw.setColor(colors.Red)
    else
        draw.setColor(colors.White)
    end

    var time = timer.getTicks() / 500
    if time % 2 == 0 || lastKeyPress > timer.getTicks() - 1000 then
        draw.fillRect(1 + cursor_x * 6, 1 + cursor_y * (fontHeight + 1), 5, fontHeight - 1, colors.Gray)
    end

    for i in 0..numRows do
        draw.textMono(1, 1 + i * (fontHeight + 1), rows[i])
    end

    pump_events()
end
