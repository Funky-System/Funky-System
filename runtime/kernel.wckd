import stdlib
import draw
import color
import input
import timer

var colors = color.Names

function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

function pump_events()
    asm "syscall.byname \"pump_events\""
end


draw.setFont("8px")
draw.setColor(colors.White)
var fontHeight = 8

var numRows = 192 / fontHeight
var rows = []
rows[numRows - 1] = empty # create elements

for i in 0..numRows - 1 do
    rows[i] = ""
end

rows[0] = "Funky System"
rows[1] = "---"
rows[2] = "# "

var keyStates = {}

function print(str)
    rows[cursor_y] = rows[cursor_y][0:cursor_x - 1] + str
    cursor_x += rows[cursor_y].length()
end

function newLine()
    cursor_y += 1
    cursor_x = 0
    if cursor_y > numRows - 1 then
        rows.deleteAt(0)
        cursor_y = numRows - 1
        rows[cursor_y] = ""
    end
end

function printLine(line)
    print(line)
    newLine()
end

var commandHistory = []
var commandHistoryIndex = 0
function processCommand(cmd)
    commandHistory[] = cmd
    debug_print(cmd + "\n")

    newLine()

    if cmd == "exit" then
        running = false
    else
        printLine(cmd)
    end

    print("# ")
end

var shiftTable = {
    "a": "A",
    "b": "B",
    "c": "C",
    "d": "D",
    "e": "E",
    "f": "F",
    "g": "G",
    "h": "H",
    "i": "I",
    "j": "J",
    "k": "K",
    "l": "L",
    "m": "M",
    "n": "N",
    "o": "O",
    "p": "P",
    "q": "Q",
    "r": "R",
    "s": "S",
    "t": "T",
    "u": "U",
    "v": "V",
    "w": "W",
    "x": "X",
    "y": "Y",
    "z": "Z",
    "1": "!",
    "2": "@",
    "3": "#",
    "4": "$",
    "5": "%",
    "6": "^",
    "7": "&",
    "8": "*",
    "9": "(",
    "0": ")",
    " ": " ",
    "-": "_",
    "=": "+",
    "[": "{",
    "]": "}",
    ";": ":",
    "'": "\"",
    "\\": "|",
    ",": "<",
    ".": ">",
    "/": "?",
    "`": "~"
}

var autocomplete_commands = ["exit", "test", "long_command"]

function autocomplete()
    var stringToCursor = rows[cursor_y][2:cursor_x - 1]
    for cmd in autocomplete_commands do
        if cmd.startsWith(stringToCursor) then
            var stringFromCursor = rows[cursor_y][cursor_x:-1]
            rows[cursor_y] = rows[cursor_y][0:1] + cmd + stringFromCursor
            cursor_x = cmd.length() + 2
            return
        end
    end
end

function processInputDown(c)
    lastKeyPress = timer.getTicks()
    if keyStates[c] == empty then
        if c == "left" then
            cursor_x -= 1
            if cursor_x < 2 then
                cursor_x = 2
            end
        else if c == "right" then
            cursor_x += 1
            if cursor_x > rows[cursor_y].length() then
                cursor_x = rows[cursor_y].length()
            end
        else if c == "backspace" then
            if cursor_x > 2 then
                rows[cursor_y] = rows[cursor_y][0:cursor_x - 2] + rows[cursor_y][cursor_x:-1]
                cursor_x -= 1
            end
        else if c == "home" then
            cursor_x = 2
        else if c == "end" then
            cursor_x = rows[cursor_y].length()
        else if c == "delete" then
            if cursor_x < rows[cursor_y].length() then
                rows[cursor_y] = rows[cursor_y][0:cursor_x - 1] + rows[cursor_y][cursor_x + 1:-1]
            end
        else if c == "up" then
            commandHistoryIndex += 1
            if (commandHistoryIndex > commandHistory.length()) then commandHistoryIndex = commandHistory.length()
            rows[cursor_y] = "# "
            if commandHistoryIndex >= 1 then
                 rows[cursor_y] += commandHistory[commandHistory.length() - commandHistoryIndex]
            end
            cursor_x = rows[cursor_y].length()
        else if c == "down" then
            commandHistoryIndex -= 1
            if (commandHistoryIndex < 0) then commandHistoryIndex = 0
            rows[cursor_y] = "# "
            if commandHistoryIndex >= 1 then
                 rows[cursor_y] += commandHistory[commandHistory.length() - commandHistoryIndex]
            end
            cursor_x = rows[cursor_y].length()
        else if c == "return" then
            processCommand(rows[cursor_y][2:-1])
        else if c == "tab" then
            autocomplete()
        else
            var c_tmp = c
            if input.key(input.Keys.Rshift) || input.key(input.Keys.Lshift) then
                c_tmp = shiftTable[c]
            end
            #debug_print(c[0] + "\n")
            if c_tmp != empty then
                rows[cursor_y] = rows[cursor_y][0:cursor_x - 1] + c_tmp + rows[cursor_y][cursor_x:-1]
                cursor_x += 1
            end
        end
        keyStates[c] = true
    end
end

function processInputUp(c)
    keyStates[c] = empty
end

function checkInput()
    if input.key(input.Keys.A) then processInputDown("a") ; else processInputUp("a")
    if input.key(input.Keys.B) then processInputDown("b") ; else processInputUp("b")
    if input.key(input.Keys.C) then processInputDown("c") ; else processInputUp("c")
    if input.key(input.Keys.D) then processInputDown("d") ; else processInputUp("d")
    if input.key(input.Keys.E) then processInputDown("e") ; else processInputUp("e")
    if input.key(input.Keys.F) then processInputDown("f") ; else processInputUp("f")
    if input.key(input.Keys.G) then processInputDown("g") ; else processInputUp("g")
    if input.key(input.Keys.H) then processInputDown("h") ; else processInputUp("h")
    if input.key(input.Keys.I) then processInputDown("i") ; else processInputUp("i")
    if input.key(input.Keys.J) then processInputDown("j") ; else processInputUp("j")
    if input.key(input.Keys.K) then processInputDown("k") ; else processInputUp("k")
    if input.key(input.Keys.L) then processInputDown("l") ; else processInputUp("l")
    if input.key(input.Keys.M) then processInputDown("m") ; else processInputUp("m")
    if input.key(input.Keys.N) then processInputDown("n") ; else processInputUp("n")
    if input.key(input.Keys.O) then processInputDown("o") ; else processInputUp("o")
    if input.key(input.Keys.P) then processInputDown("p") ; else processInputUp("p")
    if input.key(input.Keys.Q) then processInputDown("q") ; else processInputUp("q")
    if input.key(input.Keys.R) then processInputDown("r") ; else processInputUp("r")
    if input.key(input.Keys.S) then processInputDown("s") ; else processInputUp("s")
    if input.key(input.Keys.T) then processInputDown("t") ; else processInputUp("t")
    if input.key(input.Keys.U) then processInputDown("u") ; else processInputUp("u")
    if input.key(input.Keys.V) then processInputDown("v") ; else processInputUp("v")
    if input.key(input.Keys.W) then processInputDown("w") ; else processInputUp("w")
    if input.key(input.Keys.X) then processInputDown("x") ; else processInputUp("x")
    if input.key(input.Keys.Y) then processInputDown("y") ; else processInputUp("y")
    if input.key(input.Keys.Z) then processInputDown("z") ; else processInputUp("z")
    if input.key(input.Keys.Num1) then processInputDown("1") ; else processInputUp("1")
    if input.key(input.Keys.Num2) then processInputDown("2") ; else processInputUp("2")
    if input.key(input.Keys.Num3) then processInputDown("3") ; else processInputUp("3")
    if input.key(input.Keys.Num4) then processInputDown("4") ; else processInputUp("4")
    if input.key(input.Keys.Num5) then processInputDown("5") ; else processInputUp("5")
    if input.key(input.Keys.Num6) then processInputDown("6") ; else processInputUp("6")
    if input.key(input.Keys.Num7) then processInputDown("7") ; else processInputUp("7")
    if input.key(input.Keys.Num8) then processInputDown("8") ; else processInputUp("8")
    if input.key(input.Keys.Num9) then processInputDown("9") ; else processInputUp("9")
    if input.key(input.Keys.Num0) then processInputDown("0") ; else processInputUp("0")
    if input.key(input.Keys.Space) then processInputDown(" ") ; else processInputUp(" ")
    if input.key(input.Keys.Minus) then processInputDown("-") ; else processInputUp("-")
    if input.key(input.Keys.Equals) then processInputDown("=") ; else processInputUp("=")
    if input.key(input.Keys.Leftbracket) then processInputDown("[") ; else processInputUp("[")
    if input.key(input.Keys.Rightbracket) then processInputDown("]") ; else processInputUp("]")
    if input.key(input.Keys.Semicolon) then processInputDown(";") ; else processInputUp(";")
    if input.key(input.Keys.Apostrophe) then processInputDown("'") ; else processInputUp("'")
    if input.key(input.Keys.Backslash) then processInputDown("\\") ; else processInputUp("\\")
    if input.key(input.Keys.Comma) then processInputDown(",") ; else processInputUp(",")
    if input.key(input.Keys.Period) then processInputDown(".") ; else processInputUp(".")
    if input.key(input.Keys.Slash) then processInputDown("/") ; else processInputUp("/")
    if input.key(input.Keys.Grave) then processInputDown("`") ; else processInputUp("`")
    if input.key(input.Keys.Tab) then processInputDown("tab") ; else processInputUp("tab")

    if input.key(input.Keys.Left) then processInputDown("left") ; else processInputUp("left")
    if input.key(input.Keys.Right) then processInputDown("right") ; else processInputUp("right")
    if input.key(input.Keys.Home) then processInputDown("home") ; else processInputUp("home")
    if input.key(input.Keys.End) then processInputDown("end") ; else processInputUp("end")
    if input.key(input.Keys.Up) then processInputDown("up") ; else processInputUp("up")
    if input.key(input.Keys.Down) then processInputDown("down") ; else processInputUp("down")
    if input.key(input.Keys.Backspace) then processInputDown("backspace") ; else processInputUp("backspace")
    if input.key(input.Keys.Delete) then processInputDown("delete") ; else processInputUp("delete")

    if input.key(input.Keys.Return) then processInputDown("return") ; else processInputUp("return")
end

var cursor_x = 2, cursor_y = 2

var running = true
var lastKeyPress = 0
while running do
    checkInput()

    draw.cls(colors.Black)

    if input.key(input.Keys.Z) then
        draw.setColor(colors.Red)
    else
        draw.setColor(colors.White)
    end

    var time = timer.getTicks() / 500
    if time % 2 == 0 || lastKeyPress > timer.getTicks() - 1000 then
        draw.fillRect(1 + cursor_x * 6, 1 + cursor_y * fontHeight, 5, fontHeight - 1, colors.Gray)
    end

    for i in 0..numRows - 1 do
        draw.textMono(1, 1 + i * fontHeight, rows[i])
    end



#    draw.text(10, 10, "1234567890")
#    draw.text(10, 20, "Algemeen bekend Bas du Pre Come Dore Every")
#    draw.text(10, 30, "Flute Goon Hi I'm John Kloot Lief More")
#    draw.text(10, 40, "Nooit Over Prak Qwerty Risen State Toon")
#    draw.text(10, 50, "Undefined Variable Welcome Xanadu")
#    draw.text(10, 60, "You are \"Zion\", said he!?")
#    draw.text(10, 70, "me@basdupre.com")
#    draw.text(10, 80, "draw.setColor(colors.Purple[9])")
#    draw.text(10, 90, "Price: $ 50,19 / 100")
#    draw.text(10, 100, "The quick brown fox jumped over the lazy dog!?")
#    draw.text(10, 110, "i = 1 + (4 - 5)")

    pump_events()
end
