import math
import draw
import color
import input
import timer
import fs

import editor_state
import editor_gfx_file_list
import editor_msgbox

function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

var checkerboardTexture = empty

function draw_checkerboard(x, y, w, h, s = 16)
    if checkerboardTexture == empty then
        checkerboardTexture = draw.createTexture()
        draw.renderToTexture(checkerboardTexture)
        for c_x in 0..64 do ; for c_y in 0..64 do
            var c = color.Names.White
            if (c_x % 2 == 0 && c_y % 2 == 0) || (c_x % 2 == 1 && c_y % 2 == 1) then c = color.Names.LightGray
            draw.pixel(c_x, c_y, c)
        end; end
        draw.renderToTexture()
    end

    draw.sprite(checkerboardTexture, 0, 0, x, y, w / s, h / s, s, s)
end

enum Modes
    Pen, Paintbucket, Paintpixels, Line, Circle, Select, Picker
end

var mode = Modes.Pen

var currentSheet = draw.createTexture()
draw.renderToTexture(currentSheet)
draw.cls(color.Names.Transparent)
draw.renderToTexture()

var currentPrimaryColor = color.Names.Black
var currentSecondaryColor = color.Names.Transparent

var temporaryTexture = draw.createTexture()
var temporaryToolX = -1, temporaryToolY = -1

var current_filename = "sheet1"

var fileList = empty
var msgbox = empty

var colors = [
    color.Names.LightRed,
    color.Names.Red,
    color.Names.DarkRed,
    color.Names.Bordeaux,
    color.Names.LightGreen,
    color.Names.Green,
    color.Names.ForestGreen,
    color.Names.DarkGreen,
    color.Names.LightTeal,
    color.Names.Teal,
    color.Names.White,

    color.Names.LightPink,
    color.Names.Pink,
    color.Names.LightBrown,
    color.Names.Brown,
    color.Names.LightOrange,
    color.Names.Orange,
    color.Names.LightYellow,
    color.Names.Yellow,
    color.Names.LightPurple,
    color.Names.Purple,
    color.Names.Black,

    color.Names.LightBlue,
    color.Names.Blue,
    color.Names.LightNavyBlue,
    color.Names.NavyBlue,
    color.Names.SteelBlue,
    color.Names.DarkBlue,
    color.Names.LightGray,
    color.Names.Gray,
    color.Names.BlueGray,
    color.Names.DarkGray,
    color.Names.Transparent
]

var edit_size = 8
var sprite_x = 0
var sprite_y = 0
var select_x1 = empty, select_x2, select_y1, select_y2
var selecting = false

var btn_pen = new ToolButton(7, 21, 14, 14, "A", "EditorIcons")
var btn_paintbucket = new ToolButton(23, 21, 14, 14, "B", "EditorIcons")
var btn_paintpixels = new ToolButton(7, 37, 14, 14, "C", "EditorIcons")
var btn_line = new ToolButton(23, 37, 14, 14, "D", "EditorIcons")
var btn_circle = new ToolButton(7, 53, 14, 14, "E", "EditorIcons")
var btn_rect = new ToolButton(23, 53, 14, 14, "F", "EditorIcons")
var btn_select = new ToolButton(7, 69, 14, 14, "G", "EditorIcons")
var btn_picker = new ToolButton(23, 69, 14, 14, "H", "EditorIcons")

var btn_changeSheet = new ToolButton(187, 85, 64, 9, current_filename + "  ")

var btn_zoomIn = new ToolButton(242, 115, 9, 9, "+")
var btn_zoomOut = new ToolButton(232, 115, 9, 9, "-")

export function editor_draw()
    # paint surface
    draw.rect(44, 20, 130, 130, color.Names.BlueGray)
    draw_checkerboard(45, 21, 128, 128, 128 / edit_size / 2)
    if (temporaryToolX != -1) then
        draw.sprite(temporaryTexture, sprite_x, sprite_y, 45, 21, edit_size, edit_size, 128 / edit_size, 128 / edit_size)
    else
        draw.sprite(currentSheet, sprite_x, sprite_y, 45, 21, edit_size, edit_size, 128 / edit_size, 128 / edit_size)
    end

    if select_x1 != empty then
        if selecting == false then
            draw.clip(45, 21, 128, 128)
            var scale = 128 / edit_size
            draw.sprite(temporaryTexture, 0, 0, 45 + (select_x1 - sprite_x) * scale, 21 + (select_y1 - sprite_y) * scale, 64, 64, scale, scale)
            draw.clip()
        end
        drawSelection(45, 21, 128, 128, edit_size, sprite_x, sprite_y)
    end

    # colors
    var width = 10
    for c in 0..33 do
        var row = c / 11
        var col = c % 11
        if c == 32 then
            draw_checkerboard(63 + width * col, 156 + width * row, width, width, 2)
        else
            draw.fillRect(63 + width * col, 156 + width * row, width, width, colors[c])
        end
    end

    for c in 0..33 do
        var row = c / 11
        var col = c % 11
        if (currentSecondaryColor == colors[c]) then
            draw.rect(63 + width * col, 156 + width * row, width, width, color.Names.White)
            draw.rect(62 + width * col, 155 + width * row, width + 2, width + 2, color.Names.Black)
        end
    end

    for c in 0..33 do
        var row = c / 11
        var col = c % 11
        if (currentPrimaryColor == colors[c]) then
            draw.rect(63 + width * col, 156 + width * row, width, width, color.Names.Black)
            draw.rect(62 + width * col, 155 + width * row, width + 2, width + 2, color.Names.White)
        end
    end

    # current colors
    #secondary
    if currentSecondaryColor == color.Names.Transparent then
        draw_checkerboard(42, 167, 16, 16, 4)
    else
        draw.fillRect(42, 167, 16, 16, currentSecondaryColor)
    end
    draw.rect(42, 167, 16, 16, color.Names.White)
    draw.rect(41, 166, 18, 18, color.Names.Black)
    #primary
    if currentPrimaryColor == color.Names.Transparent then
        draw_checkerboard(34, 159, 16, 16, 4)
    else
        draw.fillRect(34, 159, 16, 16, currentPrimaryColor)
    end
    draw.rect(34, 159, 16, 16, color.Names.Black)
    draw.rect(33, 158, 18, 18, color.Names.White)

    # sprite sheet
    draw_checkerboard(187, 21, 64, 64, 4)
    draw.sprite(currentSheet, 0, 0, 187, 21, 64, 64, 1, 1)
    if select_x1 != empty then
        if selecting == false then
            draw.clip(187, 21, 64, 64)
            draw.sprite(temporaryTexture, 0, 0, 187 + select_x1, 21 + select_y1, 64, 64, 1, 1)
            draw.clip()
        end
        drawSelection(187, 21, 64, 64, 64, 0, 0)
    end

    btn_changeSheet.draw()
    draw.setFont("EditorIcons")
    draw.text(243, 86, ">", color.Names.LightGray)
    draw.setFont("5px")

    draw.rect(186 + sprite_x, 20 + sprite_y, edit_size + 2, edit_size + 2, color.Names.Black)
    draw.rect(185 + sprite_x, 19 + sprite_y, edit_size + 4, edit_size + 4, color.Names.White)

    # zoom
    draw.fillRect(187, 115, 44, 9, color.Names.BlueGray) # num
    draw.text(188, 108, "Zoom", color.Names.Gray)
    draw.clip(188, 115, 44, 9)
    draw.textMono(190, 117, edit_size + "x" + edit_size, color.Names.LightGray)
    draw.clip()
    btn_zoomIn.draw()
    btn_zoomOut.draw()

    # window
    draw.fillRect(187, 138, 64, 9, color.Names.BlueGray) # num
    draw.text(188, 131, "Sprite", color.Names.Gray)
    draw.clip(188, 138, 64, 9)
    draw.textMono(190, 140, sprite_x + "," + sprite_y, color.Names.LightGray)
    draw.clip()

    btn_pen.draw(mode == Modes.Pen)
    btn_paintbucket.draw(mode == Modes.Paintbucket)
    btn_paintpixels.draw(mode == Modes.Paintpixels)
    btn_line.draw(mode == Modes.Line)
    btn_circle.draw(mode == Modes.Circle)
    btn_rect.draw(mode == Modes.Rect)
    btn_select.draw(mode == Modes.Select)
    btn_picker.draw(mode == Modes.Picker)


    if fileList != empty then
        fileList.draw()
        return
    end

    if msgbox != empty then
        msgbox.draw()
        return
    end

    var mouse_x = input.mouseX(), mouse_y = input.mouseY()
    if input.leftButtonPressed() then
        btn_pen.hitTest(true, mouse_x, mouse_y)
        btn_paintbucket.hitTest(true, mouse_x, mouse_y)
        btn_paintpixels.hitTest(true, mouse_x, mouse_y)
        btn_line.hitTest(true, mouse_x, mouse_y)
        btn_circle.hitTest(true, mouse_x, mouse_y)
        btn_rect.hitTest(true, mouse_x, mouse_y)
        btn_select.hitTest(true, mouse_x, mouse_y)
        btn_picker.hitTest(true, mouse_x, mouse_y)

        btn_changeSheet.hitTest(true, mouse_x, mouse_y)
        btn_zoomIn.hitTest(true, mouse_x, mouse_y)
        btn_zoomOut.hitTest(true, mouse_x, mouse_y)
    end
end

function drawSelection(x, y, w, h, s, spr_x, spr_y)
    var sx1 = select_x1
    var sx2 = select_x2
    if sx2 < sx1 then
        sx1 = select_x2
        sx2 = select_x1 + 1
    end
    var sy1 = select_y1
    var sy2 = select_y2
    if sy2 < sy1 then
        sy1 = select_y2
        sy2 = select_y1 + 1
    end

    var x1 = math.clamp(x + (sx1 - spr_x) * w / s, x, x + w)
    var x2 = math.clamp(x + (sx2 - spr_x) * w / s - 1, x, x + w)
    var y1 = math.clamp(y + (sy1 - spr_y) * h / s, y, y + h)
    var y2 = math.clamp(y + (sy2 - spr_y) * h / s - 1, y, y + h)

    draw.clip(x1, y1, x2 - x1 + 1, y2 - y1 + 1)
    if sy1 >= spr_y then dottedLineHorizontal(x1, x2, y1)
    if sy2 <= spr_y + s then dottedLineHorizontal(x1, x2, y2)
    if sx1 >= spr_x then dottedLineVertical(y1, y2, x1)
    if sx2 <= spr_x + s then dottedLineVertical(y1, y2, x2)
    draw.clip()
end

function dottedLineHorizontal(x1, x2, y)
    var c1 = color.Names.Black
    var c2 = color.Names.White
    if (timer.getTicks() / 300) % 2 == 0 then
        c1 = color.Names.White ; c2 = color.Names.Black
    end

    draw.line(x1, y, x2, y, c1)
    for x in x1 / 2..x2 / 2 do
        if x % 2 == 0 then
            draw.rect(x * 2, y, 2, 1, c2)
        end
    end
end

function dottedLineVertical(y1, y2, x)
    var c1 = color.Names.Black
    var c2 = color.Names.White
    if (timer.getTicks() / 300) % 2 == 0 then
        c1 = color.Names.White ; c2 = color.Names.Black
    end

    draw.line(x, y1, x, y2, c1)
    for y in y1 / 2..y2 / 2 do
        if y % 2 == 0 then
            draw.rect(x, y * 2, 1, 2, c2)
        end
    end
end

function userClicked(x, y, w, h)
    var mouse_x = input.mouseX(), mouse_y = input.mouseY()
    if leftButtonDownOnX >= x && leftButtonDownOnX < x + w && mouse_x >= x && mouse_x < x + w then
        if leftButtonDownOnY >= y && leftButtonDownOnY < y + h && mouse_y >= y && mouse_y < y + h then
            return true
        end
    end
    return false
end

var leftButtonDown = false
var leftButtonDownOnX = -1, leftButtonDownOnY = -1
var rightButtonDown = false
var rightButtonDownOnX = -1, rightButtonDownOnY = -1
export function editor_update()
    if fileList != empty then
        fileList.update()
        return
    end

    if msgbox != empty then
        msgbox.update()
        return
    end

    if input.keyPress(input.Keys.O) && input.key(input.Keys.Ctrl) then openFileList()

    var mouse_x = input.mouseX(), mouse_y = input.mouseY()
    if input.leftButtonPressed() then
        if !leftButtonDown then
            leftButtonDownOnX = mouse_x
            leftButtonDownOnY = mouse_y
            leftButtonDown = true
        end

        # edit surface
        if (mouse_x >= 45 && mouse_x < 45 + 128 && mouse_y >= 21 && mouse_y < 21 + 128) && _
           (leftButtonDownOnX >= 45 && leftButtonDownOnX < 45 + 128 && leftButtonDownOnY >= 21 && leftButtonDownOnY < 21 + 128) then
            if input.key(input.Keys.Space) then
                # pan around
                if pan_move_mouse_x == empty then
                    pan_move_mouse_x = mouse_x
                    pan_move_mouse_y = mouse_y
                    pan_move_x = sprite_x
                    pan_move_y = sprite_y
                end
                sprite_x = math.clamp(pan_move_x - (mouse_x - pan_move_mouse_x) / 6, 0, 64 - edit_size)
                sprite_y = math.clamp(pan_move_y - (mouse_y - pan_move_mouse_y) / 6, 0, 64 - edit_size)
                return
            else
                pan_move_mouse_x = empty
                toolDown(true, (mouse_x - 45) / (128 / edit_size) + sprite_x, (mouse_y - 21) / (128 / edit_size) + sprite_y)
            end
        end
        # minimap
        if (mouse_x >= 187 && mouse_x < 187 + 64 && mouse_y >= 21 && mouse_y < 21 + 64) && (leftButtonDownOnX >= 187 && leftButtonDownOnX < 187 + 64 && leftButtonDownOnY >= 21 && leftButtonDownOnY < 21 + 64) then
            sprite_x = math.max(0, math.min(64 - edit_size, (mouse_x - 187) - edit_size / 2))
            sprite_y = math.max(0, math.min(64 - edit_size, (mouse_y - 21) - edit_size / 2))
            if input.key(input.Keys.Shift) then
                sprite_x = ((sprite_x + 4) / 8) * 8
                sprite_y = ((sprite_y + 4) / 8) * 8
            end
        end
    else if leftButtonDown then
        leftButtonDown = false

        if userClicked(33, 158, 26, 26) then
            var tmpc = currentPrimaryColor
            currentPrimaryColor = currentSecondaryColor
            currentSecondaryColor = tmpc
        end

        if (mouse_x >= 45 && mouse_x < 45 + 128 && mouse_y >= 21 && mouse_y < 21 + 128) && (leftButtonDownOnX >= 45 && leftButtonDownOnX < 45 + 128 && leftButtonDownOnY >= 21 && leftButtonDownOnY < 21 + 128) then
            toolUp(true, (mouse_x - 45) / (128 / edit_size) + sprite_x, (mouse_y - 21) / (128 / edit_size) + sprite_y)
        end

        var oldMode = mode

        if btn_pen.hitTest(false, mouse_x, mouse_y) then mode = Modes.Pen
        if btn_paintbucket.hitTest(false, mouse_x, mouse_y) then mode = Modes.Paintbucket
        if btn_paintpixels.hitTest(false, mouse_x, mouse_y) then mode = Modes.Paintpixels
        if btn_line.hitTest(false, mouse_x, mouse_y) then mode = Modes.Line
        if btn_circle.hitTest(false, mouse_x, mouse_y) then mode = Modes.Circle
        if btn_rect.hitTest(false, mouse_x, mouse_y) then mode = Modes.Rect
        if btn_select.hitTest(false, mouse_x, mouse_y) then mode = Modes.Select
        if btn_picker.hitTest(false, mouse_x, mouse_y) then mode = Modes.Picker

        if oldMode == Modes.Select && mode != Modes.Select then
            commitSelection()
        end

        if btn_zoomIn.hitTest(false, mouse_x, mouse_y) then
            if edit_size > 8 then
                edit_size = math.max(8, edit_size / 2)
                sprite_x += edit_size / 2
                sprite_y += edit_size / 2
            end
        end
        if btn_zoomOut.hitTest(false, mouse_x, mouse_y) then
            edit_size = math.min(64, edit_size * 2)
            sprite_x = math.max(0, math.min(64 - edit_size, sprite_x - edit_size / 4))
            sprite_y = math.max(0, math.min(64 - edit_size, sprite_y - edit_size / 4))
        end

        if btn_changeSheet.hitTest(false, mouse_x, mouse_y) then
            openFileList()
        end
    end

    if input.rightButtonPressed() then
        if !rightButtonDown then
            rightButtonDownOnX = mouse_x
            rightButtonDownOnY = mouse_y
            rightButtonDown = true
        end
        if (mouse_x >= 45 && mouse_x < 45 + 128 && mouse_y >= 21 && mouse_y < 21 + 128) && (rightButtonDownOnX >= 45 && rightButtonDownOnX < 45 + 128 && rightButtonDownOnY >= 21 && rightButtonDownOnY < 21 + 128) then
            toolDown(false, (mouse_x - 45) / (128 / edit_size) + sprite_x, (mouse_y - 21) / (128 / edit_size) + sprite_y)
        end
    else if rightButtonDown then
        rightButtonDown = false
        if (mouse_x >= 45 && mouse_x < 45 + 128 && mouse_y >= 21 && mouse_y < 21 + 128) && (rightButtonDownOnX >= 45 && rightButtonDownOnX < 45 + 128 && rightButtonDownOnY >= 21 && rightButtonDownOnY < 21 + 128) then
            toolUp(false, (mouse_x - 45) / (128 / edit_size) + sprite_x, (mouse_y - 21) / (128 / edit_size) + sprite_y)
        end
    end

    if (input.leftButtonPressed() || input.rightButtonPressed()) && (leftButtonDownOnX >= 63 && leftButtonDownOnX < 173 && leftButtonDownOnY >= 156 && leftButtonDownOnY < 186) || (rightButtonDownOnX >= 63 && rightButtonDownOnX < 173 && rightButtonDownOnY >= 156 && rightButtonDownOnY < 186) then
        for ci in 0..33 do
            var ro = ci / 11
            var co = ci % 11
            var x = 63 + 10 * co, y = 156 + 10 * ro
            if mouse_x >= x && mouse_x < x + 10 && mouse_y >= y && mouse_y < y + 10 then
                if input.leftButtonPressed() then currentPrimaryColor = colors[ci]
                if input.rightButtonPressed() then currentSecondaryColor = colors[ci]
            end
        end
    end
end

function openFileList()
    save()

    var files = []
    for f in fs.dir(editor_state.getPath()) do
        if f.toLowerCase().endsWith(".sprite") then
            files[] = f[0:-8]
        end
    end

    #files = [ "asdf", "SDf", "dfr", "test1", "asdf", "SDf", "dfr", "test1", "asdf", "SDf", "dfr", "test1", "asdf", "SDf", "dfr", "test1", "asdf", "SDf", "dfr", "test1", "asdf", "SDf", "dfr", "test1", "asdf", "SDf", "dfr", "test1" ]

    fileList = new editor_gfx_file_list.FileList(files, openFilename, renameFilename, current_filename)
end

function openFilename(filename)
    if (filename == empty) then
        fileList = empty
        return
    end

    save()

    debug_print("open file: " + filename + "\n")
    current_filename = filename
    btn_changeSheet.caption = current_filename + "  "

    var path = editor_state.getPath() + "/" + current_filename + ".sprite"
    if fs.exists(path) then
        currentSheet = draw.deserializeTexture(fs.readString(path))
    else
        currentSheet = draw.createTexture()
        save()
    end

    fileList = empty
end

function msgbox_dismiss()
    msgbox = empty
end

function renameFilename(old, new)
    if (old == empty || new == empty) then
        fileList = empty
        return
    end

    save()

    debug_print("rename file: " + old + " -> " + new + "\n")

    fileList = empty

    var path = editor_state.getPath() + "/"
    if fs.exists(path + new + ".sprite") then
        msgbox = new editor_msgbox.Msgbox(new + " already exists", msgbox_dismiss, "OK")
    else
        fs.rename(path + old + ".sprite", path + new + ".sprite")
        if current_filename == old then
            current_filename = new
            btn_changeSheet.caption = new + "  "
        end
    end
end

class ToolButton
    var caption = ""
    var x, y, w, h
    var bgUp, bgDown
    var font

    function new(x, y, w, h, caption = "", font = "7px", bgUp = color.Names.BlueGray, bgDown = color.Names.Gray)
        this.caption = caption
        this.font = font
        this.x = x ; this.y = y ; this.w = w ; this.h = h
        this.bgUp = bgUp ; this.bgDown = bgDown
    end

    function draw(down = false)
        var offset = 3
        if this.h < 10 then
            draw.setFont("5px")
            offset = 2
        else
            draw.setFont(this.font)
        end
        var text_x = this.x + this.w / 2 - draw.textWidth(this.caption) / 2
        if down then
            draw.fillRect(this.x, this.y, this.w, this.h - 1, this.bgDown) # fill
            draw.fillRect(this.x, this.y + this.h - 1, this.w, 1, color.Names.LightGray) # bottom
            draw.text(text_x, this.y + offset, this.caption, color.Names.White)
        else
            draw.fillRect(this.x, this.y, this.w, this.h, this.bgUp) # fill
            draw.text(text_x, this.y + offset, this.caption, color.Names.White)
        end
    end

    function hitTest(down, x, y)
        if x >= this.x && x <= this.x + this.w && leftButtonDownOnX >= this.x && leftButtonDownOnX <= this.x + this.w then
            if y >= this.y && y <= this.y + this.h && leftButtonDownOnY >= this.y && leftButtonDownOnY <= this.y + this.h then
                if down then
                    this.draw(true)
                else
                    this.draw(true)
                end
                return true
            end
        end
        return false
    end
end

var select_move_mouse_x = empty
var select_move_mouse_y = -1
var select_move_x1 = -1
var select_move_y1 = -1
var select_move_x2 = -1
var select_move_y2 = -1

var pan_move_mouse_x = empty
var pan_move_mouse_y = -1
var pan_move_x = -1
var pan_move_y = -1

function toolDown(primary, mouse_x, mouse_y)
    if mode == Modes.Pen then
        draw.renderToTexture(currentSheet)
        if primary then
            draw.pixel(mouse_x, mouse_y, currentPrimaryColor)
        else
            draw.pixel(mouse_x, mouse_y, currentSecondaryColor)
        end
        draw.renderToTexture()
    else if mode == Modes.Paintbucket then
        # do nothing in tooldown
    else if mode == Modes.Paintpixels then
        # do nothing in tooldown
    else if mode == Modes.Line || mode == Modes.Circle || mode == Modes.Rect then
        if temporaryToolX == -1 then
            temporaryToolX = mouse_x ; temporaryToolY = mouse_y
        end
        draw.renderToTexture(temporaryTexture)
        draw.cls(color.Names.Transparent)
        draw.sprite(currentSheet, 0, 0, 0, 0, 64, 64)
        var c = currentPrimaryColor
        if !primary then c = currentSecondaryColor

        if mode == Modes.Line then
            draw.line(temporaryToolX, temporaryToolY, mouse_x, mouse_y, c)
        else if mode == Modes.Circle then
            var delta = math.max(math.abs(temporaryToolX - mouse_x), math.abs(temporaryToolY - mouse_y)) + 1
            draw.circle(temporaryToolX, temporaryToolY, delta, c)
        else if mode == Modes.Rect then
            var w = mouse_x - temporaryToolX + 1
            var h = mouse_y - temporaryToolY + 1
            draw.rect(temporaryToolX, temporaryToolY, w, h, c)
        end

        draw.renderToTexture()
    else if mode == Modes.Picker then
        draw.renderToTexture(currentSheet)
        if primary then
            currentPrimaryColor = draw.getPixel(mouse_x, mouse_y)
        else
            currentSecondaryColor = draw.getPixel(mouse_x, mouse_y)
        end
        draw.renderToTexture()
    else if mode == Modes.Select then
        if select_x1 == empty then
            select_x1 = mouse_x
            select_y1 = mouse_y
            selecting = true
        end
        if selecting then
            if mouse_x < select_x1 then
                select_x2 = mouse_x
            else
                select_x2 = mouse_x + 1
            end

            if mouse_y < select_y1 then
                select_y2 = mouse_y
            else
                select_y2 = mouse_y + 1
            end

        else
            if mouse_x >= select_x1 && mouse_x < select_x2 && mouse_y >= select_y1 && mouse_y < select_y2 then
                if select_move_mouse_x == empty then
                    select_move_mouse_x = mouse_x
                    select_move_mouse_y = mouse_y
                    select_move_x1 = select_x1
                    select_move_y1 = select_y1
                    select_move_x2 = select_x2
                    select_move_y2 = select_y2
                end
            else
                # stop this selection, start new
                if select_move_mouse_x == empty then
                    commitSelection()
                    select_x1 = mouse_x
                    select_y1 = mouse_y
                    select_x2 = mouse_x + 1
                    select_y2 = mouse_y + 1
                    select_move_mouse_x = empty
                    selecting = true
                end
            end
            if select_move_mouse_x != empty then
                var dx = select_move_mouse_x - mouse_x
                var dy = select_move_mouse_y - mouse_y
                select_x1 = select_move_x1 - dx
                select_y1 = select_move_y1 - dy
                select_x2 = select_move_x2 - dx
                select_y2 = select_move_y2 - dy
            end
        end
    end
end

function toolUp(primary, mouse_x, mouse_y)
    pan_move_mouse_x = empty

    if mode == Modes.Line || mode == Modes.Circle || mode == Modes.Rect then
        draw.renderToTexture(currentSheet)
        var c = currentPrimaryColor
        if !primary then c = currentSecondaryColor

        if mode == Modes.Line then
            draw.line(temporaryToolX, temporaryToolY, mouse_x, mouse_y, c)
        else if mode == Modes.Circle then
            var delta = math.max(math.abs(temporaryToolX - mouse_x), math.abs(temporaryToolY - mouse_y)) + 1
            draw.circle(temporaryToolX, temporaryToolY, delta, c)
        else if mode == Modes.Rect then
            var w = mouse_x - temporaryToolX + 1
            var h = mouse_y - temporaryToolY + 1
            draw.rect(temporaryToolX, temporaryToolY, w, h, c)
        end

        draw.renderToTexture()
        temporaryToolX = temporaryToolY = -1

    else if mode == Modes.Paintbucket then
        var c = currentPrimaryColor
        if !primary then c = currentSecondaryColor
        draw.renderToTexture(currentSheet)
        paintbucket(draw.getPixel(mouse_x, mouse_y), c, mouse_x, mouse_y)
        draw.renderToTexture()

    else if mode == Modes.Select then
        if selecting then
            selecting = false
            draw.renderToTexture(temporaryTexture)
            draw.cls(color.Names.Transparent)

            var sx1 = select_x1
            var sx2 = select_x2
            if sx2 < sx1 then
                sx1 = select_x2
                sx2 = select_x1 + 1
            end
            var sy1 = select_y1
            var sy2 = select_y2
            if sy2 < sy1 then
                sy1 = select_y2
                sy2 = select_y1 + 1
            end

            select_x1 = sx1
            select_x2 = sx2
            select_y1 = sy1
            select_y2 = sy2

            draw.sprite(currentSheet, select_x1, select_y1, 0, 0, select_x2 - select_x1, select_y2 - select_y1)
            draw.renderToTexture(currentSheet)
            draw.fillRect(select_x1, select_y1, select_x2 - select_x1, select_y2 - select_y1, color.Names.Transparent)
            draw.renderToTexture()
        else
            select_move_mouse_x = empty
            if mouse_x >= select_x1 && mouse_x < select_x2 && mouse_y >= select_y1 && mouse_y < select_y2 then

            else
                commitSelection()
            end
        end
    end
end

function commitSelection()
    draw.renderToTexture(currentSheet)
    draw.sprite(temporaryTexture, 0, 0, select_x1, select_y1, select_x2 - select_x1, select_y2 - select_y1)
    draw.renderToTexture()
    select_x1 = empty
    select_move_mouse_x = empty
    selecting = false
end

function paintbucket(color_old, color_new, x, y)
    if draw.getPixel(x, y) == color_new then return
    if draw.getPixel(x, y) != color_old then return
    var q = []
    draw.pixel(x, y, color_new)
    q[] = [x, y]

    while q.length() > 0 do
        var n = q[q.length() - 1]
        q.deleteAt(q.length() - 1)
        # east
        if n[0] < 63 && draw.getPixel(n[0] + 1, n[1]) == color_old then
            draw.pixel(n[0] + 1, n[1], color_new)
            q[] = [n[0] + 1, n[1]]
        end
        # south
        if n[1] < 63 && draw.getPixel(n[0], n[1] + 1) == color_old then
            draw.pixel(n[0], n[1] + 1, color_new)
            q[] = [n[0], n[1] + 1]
        end
        # west
        if n[0] > 0 && draw.getPixel(n[0] - 1, n[1]) == color_old then
            draw.pixel(n[0] - 1, n[1], color_new)
            q[] = [n[0] - 1, n[1]]
        end
        # north
        if n[1] > 0 && draw.getPixel(n[0], n[1] - 1) == color_old then
            draw.pixel(n[0], n[1] - 1, color_new)
            q[] = [n[0], n[1] - 1]
        end
    end
end

var last_save = 0
function save()
    last_save = timer.getTicks()
    var path = editor_state.getPath()
    if path == empty then return

    fs.writeString(path + "/" + current_filename + ".sprite", draw.serializeTexture(currentSheet))
end