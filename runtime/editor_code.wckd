import draw
import timer
import color
import input
import math

var colors = color.Names

var syntaxColors = {
    "Regular": colors.White,
    "Keyword": colors.Orange,
    "Comment": colors.BlueGray,
    "Numeric": colors.LightBlue,
    "String": colors.Green
}

var lines = [""]
var cursor_x = 0, cursor_y = 0

var lastKeyPress = -10000

var scroll_x = 0, scroll_y = 0

var leftButtonDown = false

var keywords = [
    "function", "var", "end", "if", "for", "then", "do", "export",
    "import", "else", "while", "return", "empty", "true", "false",
    "this", "class", "syscall", "extends", "new", "string"
    ]
function drawLine(x, y, line)
    # find comment
    var commentIndex = line.indexOf("#")
    if commentIndex != empty then
        var comment = line[commentIndex:-1]
        line = line[0:commentIndex]
        draw.textMono(x + commentIndex * 6, y, comment, syntaxColors.Comment)
    end

    var parts = line.splitAny([" ", "(", ")", "[", "]", "-", "+", ",", "{", "}"], true)
    #var parts = line.split(" ", true)
    parts[-1] = parts[-1] + " "
    for tok in parts do
        if keywords.contains(tok[0:-2]) then
            draw.setColor(syntaxColors.Keyword)
        else if tok[0:-2].isNumeric() then
            draw.setColor(syntaxColors.Numeric)
        else
            draw.setColor(syntaxColors.Regular)
        end
        draw.textMono(x, y, tok[0:-2])
        x += (tok.length() - 1) * 6
        draw.textMono(x, y, tok[-2:-1], syntaxColors.Regular)
        x += 6;
    end

end

export function update()
    checkInput()

    draw.fillRect(0, 16, 256, 180, color.Names.DarkGray)

    var num_lines = 158 / 9 + 2
    var lines_from = math.max(0, scroll_y / 9)
    var lines_to = math.min(lines.length(), lines_from + num_lines)
    var num_cols = (256 / 6 - 1)
    var cols_from = math.max(0, scroll_x / 6)
    var cols_to = cols_from + num_cols

    if lines_from > lines_to then
        lines_from = lines_to
    end

    draw.setColor(colors.White)
    draw.setFont("7px")
    for i in lines_from..lines_to do
        drawLine(3 - scroll_x, 19 + 9 * (i - lines_from) - scroll_y % 9, lines[i])
    end

    var time = timer.getTicks() / 500
    if time % 2 == 0 || lastKeyPress > timer.getTicks() - 1000 then
        draw.fillRect(2 + cursor_x * 6 - scroll_x, 19 + 9 * (cursor_y - lines_from) - scroll_y % 9, 1, 7, colors.White)
    end

    # statusbar
    draw.fillRect(0, 183, 256, 9, colors.BlueGray)
    draw.setFont("5px")
    draw.text(2, 185, "File 1", colors.LightGray)
    draw.fillRect(80, 183, 1, 9, colors.DarkGray)

    var posTxt = (cursor_y + 1) + ":" + cursor_x
    var posTxtX = 256 - posTxt.length() * 6 - 2
    draw.textMono(posTxtX, 185, posTxt, colors.LightGray)
    draw.fillRect(posTxtX - 4, 183, 1, 9, colors.DarkGray)

    var mouse_x = input.mouseX(), mouse_y = input.mouseY()
    if input.leftButtonPressed() then
        leftButtonDown = true
    else if leftButtonDown then
        leftButtonDown = false
        if mouse_y > 16 && mouse_y < 183 then
            cursor_y = math.min(lines.length() - 1, (mouse_y - 16 + scroll_y) / 9)
            cursor_x = math.min(lines[cursor_y].length(), (mouse_x + scroll_x) / 6)
            lastKeyPress = timer.getTicks()
        end
    end
end

function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

function ensureCursorVisible()
    var num_lines = 158 / 9
    var lines_from = math.max(0, scroll_y / 9)
    var lines_to = lines_from + num_lines

    if cursor_y >= lines_to - 1 then
        scroll_y = math.max(scroll_y, (cursor_y - num_lines + 1) * 9)
    else if cursor_y <= lines_from + 1 then
        scroll_y = math.max(0, math.min(scroll_y, (cursor_y - 1) * 9))
    end

    var num_cols = (256 / 6 - 1)
    var cols_from = math.max(0, scroll_x / 6)
    var cols_to = cols_from + num_cols

    if cursor_x >= cols_to - 1 then
        scroll_x = math.max(scroll_x, (cursor_x - num_cols + 1) * 6)
    else if cursor_x <= cols_from + 1 then
        scroll_x = math.max(0, math.min(scroll_x, (cursor_x - 1) * 6))
    end

end

## Check if we must autoindent this line
function checkAutoIndent()
#    TODO
#    var indentation = 0
#
#    for i in 1..lines[cursor_y - 1].length() do
#        if lines[cursor_y - 1][0:i].isSpaces() then
#            indentation = i
#        else
#            break
#        end
#    end
#
#    var oldIndentation = indentation
#
#    if lines[cursor_y].trim() == "end" then
#        indentation -= tabSize
#    end

end

## Auto indent after return
function autoIndentReturn()
    if lines[cursor_y - 1].length() == 0 then
        return
    end

    var indentation = 0
    for i in 1..lines[cursor_y - 1].length() + 1 do
        if lines[cursor_y - 1][0:i].isSpaces() then
            indentation = i
        else
            break
        end
    end

    if lines[cursor_y - 1].trim().startsWith("function ") && lines[cursor_y - 1].trim().endsWith(")") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("if ") && lines[cursor_y - 1].trim().endsWith(" then") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("for ") && lines[cursor_y - 1].trim().endsWith(" do") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("while ") && lines[cursor_y - 1].trim().endsWith(" do") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("class ") then
        indentation += tabSize
    end

    if indentation > 0 then
        lines[cursor_y] = " ".repeat(indentation) + lines[cursor_y]
        cursor_x += indentation
    end
end

var shiftTable = {
    "a": "A",
    "b": "B",
    "c": "C",
    "d": "D",
    "e": "E",
    "f": "F",
    "g": "G",
    "h": "H",
    "i": "I",
    "j": "J",
    "k": "K",
    "l": "L",
    "m": "M",
    "n": "N",
    "o": "O",
    "p": "P",
    "q": "Q",
    "r": "R",
    "s": "S",
    "t": "T",
    "u": "U",
    "v": "V",
    "w": "W",
    "x": "X",
    "y": "Y",
    "z": "Z",
    "1": "!",
    "2": "@",
    "3": "#",
    "4": "$",
    "5": "%",
    "6": "^",
    "7": "&",
    "8": "*",
    "9": "(",
    "0": ")",
    " ": " ",
    "-": "_",
    "=": "+",
    "[": "{",
    "]": "}",
    ";": ":",
    "'": "\"",
    "\\": "|",
    ",": "<",
    ".": ">",
    "/": "?",
    "`": "~"
}

var tabSize = 2

var keyStates = {}
function processInputDown(c)
    lastKeyPress = timer.getTicks()
    if keyStates[c] == empty then
        if c == "left" then
            cursor_x -= 1
            if cursor_x < 0 then
                if cursor_y > 0 then
                    cursor_y -= 1
                    cursor_x = lines[cursor_y].length()
                end
            end
            if cursor_x < 0 then cursor_x = 0;
        else if c == "right" then
            cursor_x += 1
            if cursor_x > lines[cursor_y].length() then
                if cursor_y < lines.length() - 1 then
                    cursor_x = 0
                    cursor_y += 1
                end
                if cursor_x > lines[cursor_y].length() then cursor_x = lines[cursor_y].length();
            end
        else if c == "backspace" then
            if cursor_x > 0 then
                lines[cursor_y] = lines[cursor_y][0:cursor_x - 1] + lines[cursor_y][cursor_x:-1]
                cursor_x -= 1
            else
                if cursor_y >= 1 then
                    cursor_x = lines[cursor_y - 1].length()
                    lines[cursor_y - 1] = lines[cursor_y - 1] + lines[cursor_y]
                    lines.deleteAt(cursor_y)
                    cursor_y -= 1
                end
            end
        else if c == "home" then
            cursor_x = 0
        else if c == "end" then
            cursor_x = lines[cursor_y].length()
        else if c == "delete" then
            if cursor_x < lines[cursor_y].length() then
                lines[cursor_y] = lines[cursor_y][0:cursor_x] + lines[cursor_y][cursor_x + 1:-1]
            else
                if cursor_y < lines.length() - 1 then
                    lines[cursor_y] = lines[cursor_y] + lines[cursor_y + 1]
                    lines.deleteAt(cursor_y + 1)
                end
            end
        else if c == "up" then
            if cursor_y > 0 then
                cursor_y -= 1
                if cursor_x > lines[cursor_y].length() then cursor_x = lines[cursor_y].length();
            end
        else if c == "down" then
            if cursor_y < lines.length() - 1 then
                cursor_y += 1
                if cursor_x > lines[cursor_y].length() then cursor_x = lines[cursor_y].length();
            end
        else if c == "return" then
            lines.insertAt(cursor_y + 1, lines[cursor_y][cursor_x:-1])
            lines[cursor_y] = lines[cursor_y][0:cursor_x]
            cursor_y += 1
            cursor_x = 0
            autoIndentReturn()
        else if c == "tab" then
            var tabs = ""
            for i in 0..(tabSize-(cursor_x % tabSize)) do
                tabs += " "
            end
            lines[cursor_y] = lines[cursor_y][0:cursor_x] + tabs + lines[cursor_y][cursor_x:-1]
            cursor_x += tabs.length()
        else
            var c_tmp = c
            if input.key(input.Keys.Rshift) || input.key(input.Keys.Lshift) then
                c_tmp = shiftTable[c]
            end
            if c_tmp != empty then
                lines[cursor_y] = lines[cursor_y][0:cursor_x] + c_tmp + lines[cursor_y][cursor_x:-1]
                cursor_x += 1

                checkAutoIndent()
            end
        end
        keyStates[c] = true
        ensureCursorVisible()
    end
end

function processInputUp(c)
    keyStates[c] = empty
end

function checkInput()
    if input.key(input.Keys.A) then processInputDown("a") ; else processInputUp("a")
    if input.key(input.Keys.B) then processInputDown("b") ; else processInputUp("b")
    if input.key(input.Keys.C) then processInputDown("c") ; else processInputUp("c")
    if input.key(input.Keys.D) then processInputDown("d") ; else processInputUp("d")
    if input.key(input.Keys.E) then processInputDown("e") ; else processInputUp("e")
    if input.key(input.Keys.F) then processInputDown("f") ; else processInputUp("f")
    if input.key(input.Keys.G) then processInputDown("g") ; else processInputUp("g")
    if input.key(input.Keys.H) then processInputDown("h") ; else processInputUp("h")
    if input.key(input.Keys.I) then processInputDown("i") ; else processInputUp("i")
    if input.key(input.Keys.J) then processInputDown("j") ; else processInputUp("j")
    if input.key(input.Keys.K) then processInputDown("k") ; else processInputUp("k")
    if input.key(input.Keys.L) then processInputDown("l") ; else processInputUp("l")
    if input.key(input.Keys.M) then processInputDown("m") ; else processInputUp("m")
    if input.key(input.Keys.N) then processInputDown("n") ; else processInputUp("n")
    if input.key(input.Keys.O) then processInputDown("o") ; else processInputUp("o")
    if input.key(input.Keys.P) then processInputDown("p") ; else processInputUp("p")
    if input.key(input.Keys.Q) then processInputDown("q") ; else processInputUp("q")
    if input.key(input.Keys.R) then processInputDown("r") ; else processInputUp("r")
    if input.key(input.Keys.S) then processInputDown("s") ; else processInputUp("s")
    if input.key(input.Keys.T) then processInputDown("t") ; else processInputUp("t")
    if input.key(input.Keys.U) then processInputDown("u") ; else processInputUp("u")
    if input.key(input.Keys.V) then processInputDown("v") ; else processInputUp("v")
    if input.key(input.Keys.W) then processInputDown("w") ; else processInputUp("w")
    if input.key(input.Keys.X) then processInputDown("x") ; else processInputUp("x")
    if input.key(input.Keys.Y) then processInputDown("y") ; else processInputUp("y")
    if input.key(input.Keys.Z) then processInputDown("z") ; else processInputUp("z")
    if input.key(input.Keys.Num1) then processInputDown("1") ; else processInputUp("1")
    if input.key(input.Keys.Num2) then processInputDown("2") ; else processInputUp("2")
    if input.key(input.Keys.Num3) then processInputDown("3") ; else processInputUp("3")
    if input.key(input.Keys.Num4) then processInputDown("4") ; else processInputUp("4")
    if input.key(input.Keys.Num5) then processInputDown("5") ; else processInputUp("5")
    if input.key(input.Keys.Num6) then processInputDown("6") ; else processInputUp("6")
    if input.key(input.Keys.Num7) then processInputDown("7") ; else processInputUp("7")
    if input.key(input.Keys.Num8) then processInputDown("8") ; else processInputUp("8")
    if input.key(input.Keys.Num9) then processInputDown("9") ; else processInputUp("9")
    if input.key(input.Keys.Num0) then processInputDown("0") ; else processInputUp("0")
    if input.key(input.Keys.Space) then processInputDown(" ") ; else processInputUp(" ")
    if input.key(input.Keys.Minus) then processInputDown("-") ; else processInputUp("-")
    if input.key(input.Keys.Equals) then processInputDown("=") ; else processInputUp("=")
    if input.key(input.Keys.Leftbracket) then processInputDown("[") ; else processInputUp("[")
    if input.key(input.Keys.Rightbracket) then processInputDown("]") ; else processInputUp("]")
    if input.key(input.Keys.Semicolon) then processInputDown(";") ; else processInputUp(";")
    if input.key(input.Keys.Apostrophe) then processInputDown("'") ; else processInputUp("'")
    if input.key(input.Keys.Backslash) then processInputDown("\\") ; else processInputUp("\\")
    if input.key(input.Keys.Comma) then processInputDown(",") ; else processInputUp(",")
    if input.key(input.Keys.Period) then processInputDown(".") ; else processInputUp(".")
    if input.key(input.Keys.Slash) then processInputDown("/") ; else processInputUp("/")
    if input.key(input.Keys.Grave) then processInputDown("`") ; else processInputUp("`")
    if input.key(input.Keys.Tab) then processInputDown("tab") ; else processInputUp("tab")

    if input.key(input.Keys.Left) then processInputDown("left") ; else processInputUp("left")
    if input.key(input.Keys.Right) then processInputDown("right") ; else processInputUp("right")
    if input.key(input.Keys.Home) then processInputDown("home") ; else processInputUp("home")
    if input.key(input.Keys.End) then processInputDown("end") ; else processInputUp("end")
    if input.key(input.Keys.Up) then processInputDown("up") ; else processInputUp("up")
    if input.key(input.Keys.Down) then processInputDown("down") ; else processInputUp("down")
    if input.key(input.Keys.Backspace) then processInputDown("backspace") ; else processInputUp("backspace")
    if input.key(input.Keys.Delete) then processInputDown("delete") ; else processInputUp("delete")

    if input.key(input.Keys.Return) then processInputDown("return") ; else processInputUp("return")

    if input.key(input.Keys.F1) then scroll_y += 1 ;
    if input.key(input.Keys.F2) then scroll_y = math.max(0, scroll_y - 1) ;
    if input.key(input.Keys.F3) then scroll_x += 1 ;
    if input.key(input.Keys.F4) then scroll_x = math.max(0, scroll_x - 1) ;
end