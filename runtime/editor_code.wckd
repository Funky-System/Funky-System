import draw
import timer
import color
import input
import math
import keyboard
import clipboard
import fs

import editor_state
import editor_prompt
import editor_file_list

var colors = color.Names

var syntaxColors = {
    "Regular": colors.White,
    "Keyword": colors.Orange,
    "Comment": colors.BlueGray,
    "Numeric": colors.LightBlue,
    "String": colors.Green
}

var lines = [""]
var cursor_x = 0, cursor_y = 0
var selection_start_x = -1, selection_start_y = -1

var lastKeyPress = -10000

var scroll_x = 0, scroll_y = 0

var leftButtonDown = false

var keywords = [
    "function", "var", "end", "if", "for", "then", "do", "export",
    "import", "else", "while", "return", "empty", "true", "false",
    "this", "class", "syscall", "extends", "new", "string", "break",
    "continue"
    ]
function drawLine(x, y, line)
    # find comment
    var commentIndex = line.indexOf("#")
    if commentIndex != empty then
        var comment = line[commentIndex:-1]
        line = line[0:commentIndex]
        draw.textMono(x + commentIndex * 6, y, comment, syntaxColors.Comment)
    end

    var parts = line.splitAny([" ", "(", ")", "[", "]", "-", "+", ",", "{", "}"], true)
    #var parts = line.split(" ", true)
    parts[-1] = parts[-1] + " "
    for tok in parts do
        if keywords.contains(tok[0:-2]) then
            draw.setColor(syntaxColors.Keyword)
        else if tok[0:-2].isNumeric() then
            draw.setColor(syntaxColors.Numeric)
        else
            draw.setColor(syntaxColors.Regular)
        end
        draw.textMono(x, y, tok[0:-2])
        x += (tok.length() - 1) * 6
        draw.textMono(x, y, tok[-2:-1], syntaxColors.Regular)
        x += 6;
    end
end

function drawSelectionForLine(line_y)
    if selection_start_x > -1 && selection_start_y > -1 then
        var to_x = cursor_x
        var from_x = selection_start_x

        var to_y = cursor_y
        var from_y = selection_start_y

        if selection_start_y > cursor_y || (selection_start_y == cursor_y && selection_start_x > cursor_x) then
            to_x = selection_start_x; from_x = cursor_x
            to_y = selection_start_y; from_y = cursor_y
        end

        if from_y > line_y then return ;
        if to_y < line_y then return ;

        if from_y < line_y then from_x = 0 ;

        var lines_from = math.max(0, scroll_y / 9)
        var width = (to_x - from_x) * 6

        if to_y > line_y then width = 256 + scroll_x;

        draw.fillRect(2 + from_x * 6 - scroll_x, 18 + 9 * (line_y - lines_from) - scroll_y % 9, width, 9, colors.Blue)
    end
end

var prompt = empty
var filelist = empty

export function editor_draw()
    draw.fillRect(0, 16, 256, 180, color.Names.DarkGray)

    var num_lines = 158 / 9 + 2
    var lines_from = math.max(0, scroll_y / 9)
    var lines_to = math.min(lines.length(), lines_from + num_lines)
    var num_cols = (256 / 6 - 1)
    var cols_from = math.max(0, scroll_x / 6)
    var cols_to = cols_from + num_cols

    if lines_from > lines_to then
        lines_from = lines_to
    end

    draw.setFont("7px")
    for i in lines_from..lines_to do
        drawSelectionForLine(i)
        drawLine(3 - scroll_x, 19 + 9 * (i - lines_from) - scroll_y % 9, lines[i])
    end

    if prompt == empty && filelist == empty then
        var time = timer.getTicks() / 500
        if time % 2 == 0 || lastKeyPress > timer.getTicks() - 1000 then
            draw.fillRect(2 + cursor_x * 6 - scroll_x, 19 + 9 * (cursor_y - lines_from) - scroll_y % 9, 1, 7, colors.White)
        end
    end

    # statusbar
    draw.fillRect(0, 183, 256, 9, colors.BlueGray)
    draw.setFont("5px")
    draw.text(2, 185, current_filename, colors.LightGray)
    draw.fillRect(80, 183, 1, 9, colors.DarkGray)

    var posTxt = (cursor_y + 1) + ":" + cursor_x
    var posTxtX = 256 - posTxt.length() * 6 - 2
    draw.textMono(posTxtX, 185, posTxt, colors.LightGray)
    draw.fillRect(posTxtX - 4, 183, 1, 9, colors.DarkGray)

    if prompt != empty then
        prompt.draw()
    end

    if filelist != empty then
        filelist.draw()
    end
end

var last_save = 0

export function editor_update()
    if prompt == empty && filelist == empty then
        if last_save < timer.getTicks() - 1000 then save()

        checkInput()
        checkMouseWheel()

        var mouse_x = input.mouseX(), mouse_y = input.mouseY()
        if input.leftButtonPressed() then

            if mouse_y > 16 && mouse_y < 183 then
                cursor_y = math.max(0, math.min(lines.length() - 1, (mouse_y - 16 + scroll_y) / 9))
                cursor_x = math.max(0, math.min(lines[cursor_y].length(), (mouse_x + scroll_x) / 6))
                lastKeyPress = timer.getTicks()
            end

            if !leftButtonDown then
                selection_start_y = cursor_y ; selection_start_x = cursor_x
                leftButtonDown = true
            end
        else if leftButtonDown then
            leftButtonDown = false
            if selection_start_x == cursor_x && selection_start_y == cursor_y then selection_start_y = selection_start_x = -1 ;

            if mouse_x <= 80 && mouse_y >= 183 then
                openFileList()
            end
        end
    end

    if prompt != empty then
        prompt.update()
    end

    if filelist != empty then
        filelist.update()
    end
end

function filenamePromptCallback(filename)
    debug_print(filename + "\n")
    prompt = empty
end

#prompt = new editor_prompt.Prompt("Filename:", filenamePromptCallback)

function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

function ensureCursorVisible()
    var num_lines = 158 / 9
    var lines_from = math.max(0, scroll_y / 9)
    var lines_to = lines_from + num_lines

    if cursor_y >= lines_to - 1 then
        scroll_y = math.max(scroll_y, (cursor_y - num_lines + 1) * 9)
    else if cursor_y <= lines_from + 1 then
        scroll_y = math.max(0, math.min(scroll_y, (cursor_y - 1) * 9))
    end

    var num_cols = (256 / 6 - 1)
    var cols_from = math.max(0, scroll_x / 6)
    var cols_to = cols_from + num_cols

    if cursor_x >= cols_to - 1 then
        scroll_x = math.max(scroll_x, (cursor_x - num_cols + 1) * 6)
    else if cursor_x <= cols_from + 1 then
        scroll_x = math.max(0, math.min(scroll_x, (cursor_x - 1) * 6))
    end

end

## Check if we must autoindent this line
function checkAutoIndent()
#    TODO
#    var indentation = 0
#
#    for i in 1..lines[cursor_y - 1].length() do
#        if lines[cursor_y - 1][0:i].isSpaces() then
#            indentation = i
#        else
#            break
#        end
#    end
#
#    var oldIndentation = indentation
#
#    if lines[cursor_y].trim() == "end" then
#        indentation -= tabSize
#    end

end

## Auto indent after return
function autoIndentReturn()
    if lines[cursor_y - 1].length() == 0 then
        return
    end

    var indentation = 0
    for i in 1..lines[cursor_y - 1].length() + 1 do
        if lines[cursor_y - 1][0:i].isSpaces() then
            indentation = i
        else
            break
        end
    end

    if lines[cursor_y - 1].trim().startsWith("function ") && lines[cursor_y - 1].trim().endsWith(")") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("if ") && lines[cursor_y - 1].trim().endsWith(" then") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("for ") && lines[cursor_y - 1].trim().endsWith(" do") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("while ") && lines[cursor_y - 1].trim().endsWith(" do") then
        indentation += tabSize
    end

    if lines[cursor_y - 1].trim().startsWith("class ") then
        indentation += tabSize
    end

    if indentation > 0 then
        lines[cursor_y] = " ".repeat(indentation) + lines[cursor_y]
        cursor_x += indentation
    end
end

var shiftTable = keyboard.getShiftTable()

var tabSize = 2

function insert(str)
    # first check if there is a selection
    if selection_start_x > -1 then
        # and remove that text
        var to_x = cursor_x
        var from_x = selection_start_x

        var to_y = cursor_y
        var from_y = selection_start_y

        if selection_start_y > cursor_y || (selection_start_y == cursor_y && selection_start_x > cursor_x) then
            to_x = selection_start_x; from_x = cursor_x
            to_y = selection_start_y; from_y = cursor_y
        end

        for y in to_y..from_y - 1 do
            var tmp_from_x = from_x, tmp_to_x = to_x
            if from_y < y then tmp_from_x = 0 ;
            if to_y > y then tmp_to_x = lines[y].length() ;

            if from_y < y then
                # merge this line with previous
                to_y = y - 1
                to_x = lines[y - 1].length()
                lines[y - 1] += lines[y][tmp_to_x:-1]
                lines.deleteAt(y)
                continue
            end

            lines[y] = lines[y][0:tmp_from_x] + lines[y][tmp_to_x:-1]
        end

        cursor_x = from_x ; cursor_y = from_y
    end

    var insert_lines = str.split("\n")
    var rest = lines[cursor_y][cursor_x:-1]
    lines[cursor_y] = lines[cursor_y][0:cursor_x] + insert_lines[0]
    if insert_lines.length() == 1 then
        cursor_x += str.length()
        lines[cursor_y] += lines[cursor_y][cursor_x:-1] + rest
    else
        for line in 1..insert_lines.length() do
            lines.insertAt(cursor_y + 1, insert_lines[line])
            cursor_y += 1;
        end
        cursor_x = insert_lines[insert_lines.length() - 1].length()
        lines[cursor_y] = lines[cursor_y] + rest
    end

    checkAutoIndent()

    selection_start_x = selection_start_y = -1

    ensureCursorVisible()
end

function alignCursorLeftOfSelection()
    var to_x = cursor_x
    var from_x = selection_start_x

    var to_y = cursor_y
    var from_y = selection_start_y

    if selection_start_y > cursor_y || (selection_start_y == cursor_y && selection_start_x > cursor_x) then
        to_x = selection_start_x; from_x = cursor_x
        to_y = selection_start_y; from_y = cursor_y
    end

    cursor_x = from_x
    cursor_y = from_y
    selection_start_x = to_x
    selection_start_y = to_y
end

function alignCursorRightOfSelection()
    var to_x = cursor_x
    var from_x = selection_start_x

    var to_y = cursor_y
    var from_y = selection_start_y

    if selection_start_y > cursor_y || (selection_start_y == cursor_y && selection_start_x > cursor_x) then
        to_x = selection_start_x; from_x = cursor_x
        to_y = selection_start_y; from_y = cursor_y
    end

    cursor_x = to_x
    cursor_y = to_y
    selection_start_x = from_x
    selection_start_y = from_y
end

function processInput(c)
    lastKeyPress = timer.getTicks()
    var endSelection = false
    if c == "left" || c == "right" || c == "up" || c == "down" || c == "home" || c == "end" then
        if input.key(input.Keys.Shift) then
            if selection_start_x == -1 then
                selection_start_x = cursor_x
                selection_start_y = cursor_y
            end
        else
            endSelection = true
        end
    else
        endSelection = true
    end

    if c == "left" then
        if !endSelection || selection_start_x == -1 then
            cursor_x -= 1
            if cursor_x < 0 then
                if cursor_y > 0 then
                    cursor_y -= 1
                    cursor_x = lines[cursor_y].length()
                end
            end
            if cursor_x < 0 then cursor_x = 0;
        else
            alignCursorLeftOfSelection()
        end
    else if c == "right" then
        if !endSelection || selection_start_x == -1 then
            cursor_x += 1
            if cursor_x > lines[cursor_y].length() then
                if cursor_y < lines.length() - 1 then
                    cursor_x = 0
                    cursor_y += 1
                end
                if cursor_x > lines[cursor_y].length() then cursor_x = lines[cursor_y].length();
            end
        else
            alignCursorRightOfSelection()
        end
    else if c == "backspace" then
        if selection_start_y > -1 then
            insert("")
        else
            if cursor_x > 0 then
                lines[cursor_y] = lines[cursor_y][0:cursor_x - 1] + lines[cursor_y][cursor_x:-1]
                cursor_x -= 1
            else
                if cursor_y >= 1 then
                    cursor_x = lines[cursor_y - 1].length()
                    lines[cursor_y - 1] = lines[cursor_y - 1] + lines[cursor_y]
                    lines.deleteAt(cursor_y)
                    cursor_y -= 1
                end
            end
        end
    else if c == "home" then
        cursor_x = 0
    else if c == "end" then
        cursor_x = lines[cursor_y].length()
    else if c == "delete" then
        if selection_start_y > -1 then
            insert("")
        else
            if cursor_x < lines[cursor_y].length() then
                lines[cursor_y] = lines[cursor_y][0:cursor_x] + lines[cursor_y][cursor_x + 1:-1]
            else
                if cursor_y < lines.length() - 1 then
                    lines[cursor_y] = lines[cursor_y] + lines[cursor_y + 1]
                    lines.deleteAt(cursor_y + 1)
                end
            end
        end
    else if c == "up" then
        if cursor_y > 0 then
            cursor_y -= 1
            if cursor_x > lines[cursor_y].length() then cursor_x = lines[cursor_y].length();
        end
    else if c == "down" then
        if cursor_y < lines.length() - 1 then
            cursor_y += 1
            if cursor_x > lines[cursor_y].length() then cursor_x = lines[cursor_y].length();
        end
    else if c == "return" then
        insert("\n")
        autoIndentReturn()
    else if c == "tab" then
        var tabs = ""
        for i in 0..(tabSize-(cursor_x % tabSize)) do
            tabs += " "
        end
        insert(tabs)
    else if !input.key(input.Keys.Ctrl) then
        var c_tmp = c
        if input.key(input.Keys.Shift) then
            c_tmp = shiftTable[c]
        end
        if c_tmp != empty then
            insert(c_tmp)
        end
    end
    ensureCursorVisible()

    if input.key(input.Keys.Ctrl) then return

    if endSelection then
        selection_start_x = selection_start_y = -1 ;
    end
end

function checkInput()
    if input.keyPress(input.Keys.A) then processInput("a")
    if input.keyPress(input.Keys.B) then processInput("b")
    if input.keyPress(input.Keys.C) then processInput("c")
    if input.keyPress(input.Keys.D) then processInput("d")
    if input.keyPress(input.Keys.E) then processInput("e")
    if input.keyPress(input.Keys.F) then processInput("f")
    if input.keyPress(input.Keys.G) then processInput("g")
    if input.keyPress(input.Keys.H) then processInput("h")
    if input.keyPress(input.Keys.I) then processInput("i")
    if input.keyPress(input.Keys.J) then processInput("j")
    if input.keyPress(input.Keys.K) then processInput("k")
    if input.keyPress(input.Keys.L) then processInput("l")
    if input.keyPress(input.Keys.M) then processInput("m")
    if input.keyPress(input.Keys.N) then processInput("n")
    if input.keyPress(input.Keys.O) then processInput("o")
    if input.keyPress(input.Keys.P) then processInput("p")
    if input.keyPress(input.Keys.Q) then processInput("q")
    if input.keyPress(input.Keys.R) then processInput("r")
    if input.keyPress(input.Keys.S) then processInput("s")
    if input.keyPress(input.Keys.T) then processInput("t")
    if input.keyPress(input.Keys.U) then processInput("u")
    if input.keyPress(input.Keys.V) then processInput("v")
    if input.keyPress(input.Keys.W) then processInput("w")
    if input.keyPress(input.Keys.X) then processInput("x")
    if input.keyPress(input.Keys.Y) then processInput("y")
    if input.keyPress(input.Keys.Z) then processInput("z")
    if input.keyPress(input.Keys.Num1) then processInput("1")
    if input.keyPress(input.Keys.Num2) then processInput("2")
    if input.keyPress(input.Keys.Num3) then processInput("3")
    if input.keyPress(input.Keys.Num4) then processInput("4")
    if input.keyPress(input.Keys.Num5) then processInput("5")
    if input.keyPress(input.Keys.Num6) then processInput("6")
    if input.keyPress(input.Keys.Num7) then processInput("7")
    if input.keyPress(input.Keys.Num8) then processInput("8")
    if input.keyPress(input.Keys.Num9) then processInput("9")
    if input.keyPress(input.Keys.Num0) then processInput("0")
    if input.keyPress(input.Keys.Space) then processInput(" ")
    if input.keyPress(input.Keys.Minus) then processInput("-")
    if input.keyPress(input.Keys.Equals) then processInput("=")
    if input.keyPress(input.Keys.Leftbracket) then processInput("[")
    if input.keyPress(input.Keys.Rightbracket) then processInput("]")
    if input.keyPress(input.Keys.Semicolon) then processInput(";")
    if input.keyPress(input.Keys.Apostrophe) then processInput("'")
    if input.keyPress(input.Keys.Backslash) then processInput("\\")
    if input.keyPress(input.Keys.Comma) then processInput(",")
    if input.keyPress(input.Keys.Period) then processInput(".")
    if input.keyPress(input.Keys.Slash) then processInput("/")
    if input.keyPress(input.Keys.Grave) then processInput("`")
    if input.keyPress(input.Keys.Tab) then processInput("tab")

    if input.keyPress(input.Keys.Left) then processInput("left")
    if input.keyPress(input.Keys.Right) then processInput("right")
    if input.keyPress(input.Keys.Home) then processInput("home")
    if input.keyPress(input.Keys.End) then processInput("end")
    if input.keyPress(input.Keys.Up) then processInput("up")
    if input.keyPress(input.Keys.Down) then processInput("down")
    if input.keyPress(input.Keys.Backspace) then processInput("backspace")
    if input.keyPress(input.Keys.Delete) then processInput("delete")

    if input.keyPress(input.Keys.Return) then processInput("return")

    if input.keyPress(input.Keys.X) && input.key(input.Keys.Ctrl) then cut()
    if input.keyPress(input.Keys.C) && input.key(input.Keys.Ctrl) then copy()
    if input.keyPress(input.Keys.V) && input.key(input.Keys.Ctrl) then paste()

    if input.keyPress(input.Keys.O) && input.key(input.Keys.Ctrl) then openFileList()

    if input.keyPress(input.Keys.F6) then insert("This\nIs\na\ntest")

    if input.key(input.Keys.F1) then scroll_y += 1 ;
    if input.key(input.Keys.F2) then scroll_y = math.max(0, scroll_y - 1) ;
    if input.key(input.Keys.F3) then scroll_x += 1 ;
    if input.key(input.Keys.F4) then scroll_x = math.max(0, scroll_x - 1) ;


    var num_lines = 158 / 9
    if input.keyPress(input.Keys.Pagedown) then scroll_y += 158;
    if input.keyPress(input.Keys.Pageup) then scroll_y = math.max(0, scroll_y - 158) ;
end

function getSelectedText()
    var to_x = cursor_x
    var from_x = selection_start_x

    var to_y = cursor_y
    var from_y = selection_start_y

    if selection_start_y > cursor_y || (selection_start_y == cursor_y && selection_start_x > cursor_x) then
        to_x = selection_start_x; from_x = cursor_x
        to_y = selection_start_y; from_y = cursor_y
    end

    if from_y == to_y then
        return lines[from_y][from_x:to_x]
    end

    var str = ""

    for y in from_y..to_y + 1 do
        if from_y == y              then str += lines[y][from_x:-1]
        if from_y < y && to_y != y  then str += lines[y]
        if to_y == y                then str += lines[y][0:to_x]
        if to_y != y then str += "\n"
    end

    return str
end

function cut()
    copy()
    insert("")
end

function copy()
    clipboard.set(getSelectedText())
end

function paste()
    insert(clipboard.get())
end

var lastWheelX = 0, lastWheelY = 0
function checkMouseWheel()
    var num_lines = 158 / 9

    var wheelX = input.mouseWheelX()
    var wheelY = input.mouseWheelY()

    var mult = 4
    scroll_x += (wheelX - lastWheelX) * mult
    scroll_y -= (wheelY - lastWheelY) * mult
    scroll_x = math.max(scroll_x, 0)
    scroll_y = math.max(scroll_y, 0)
    if lines.length() > num_lines then scroll_y = math.min(scroll_y, lines.length() * 9 - num_lines * 9)

    lastWheelX = wheelX ; lastWheelY = wheelY
end

function openFileList()
    var files = []
    for f in fs.dir(editor_state.getPath()) do
        if f.toLowerCase().endsWith(".wckd") then
            files[] = f[0:-6]
        end
    end

    filelist = new editor_file_list.FileList(files, openFilename, current_filename)
end

var current_filename = "main"

function openFilename(filename)
    if (filename == empty) then return

    save()

    debug_print("open file: " + filename + "\n")
    current_filename = filename

    var path = editor_state.getPath() + "/" + current_filename + ".wckd"
    if fs.exists(path) then
        lines = fs.readString(path).split("\n")
    else
        lines = [""]
        save()
    end

    cursor_x = cursor_y = 0

    filelist = empty
end

function save()
    var path = editor_state.getPath()
    if path == empty then return

    fs.writeString(path + "/" + current_filename + ".wckd", lines.join("\n"))
end