function debug_print(str)
    asm "
        ld.arg 0
        conv.str
        syscall.byname \"debug_print\"
        pop
    "
end

############
## ARRAYS ##
############

(prototypeof array).length = arrayLength
function arrayLength()
    var length = 0
    asm "
        ld.local 0
        ld.mapitem \"value\"
        arr.len
        st.local 1
    "
    return length
end

(prototypeof array).deleteAt = arrayDeleteAt
function arrayDeleteAt(index)
    asm "
        ld.local 0
        ld.arg 0
        del.arrelem
    "
end

(prototypeof array).insertAt = arrayInsertAt
function arrayInsertAt(index, value)
    asm "
        ld.arg 1
        ld.local 0
        ld.arg 0
        arr.insert
    "
end

(prototypeof array).contains = arrayContains
function arrayContains(val)
    for e in this.value do
        if e == val then return true;
    end
    return false
end

#############
## STRINGS ##
#############

(prototypeof string).length = stringLength
function stringLength()
    var length = 0
    asm "
        ld.local 0
        ld.mapitem \"value\"
        str.len
        st.local 1
    "
    return length
end

(prototypeof string).toLowerCase = stringToLowerCase
function stringToLowerCase()
    var copy = 0
    asm "
        ld.local 0
        ld.mapitem \"value\"
        ld.str \"\"
        str.concat
        st.local 1
    "
    for i in 0..copy.length() do
        if copy[i] >= 65 && copy[i] <= 90 then
            copy[i] += 32;
        end
    end
    return copy
end

(prototypeof string).startsWith = stringStartsWith
function stringStartsWith(str)
    return this.value[0:str.length()] == str
end

(prototypeof string).endsWith = stringEndsWith
function stringEndsWith(str)
    return this.value[-str.length() - 1: -1] == str
end

(prototypeof string).indexOf = stringIndexOf
function stringIndexOf(str)
    var len = str.length()
    for i in 0..this.length() do
        if this.value[i:i + len] == str then
           return i
        end
    end
    return empty
end

(prototypeof string).indexOfAny = stringIndexOfAny
function stringIndexOfAny(strArray)
    var first = -1
    var firstStr = ""
    for str in strArray do
        var i = this.indexOf(str)
        if i != empty && (first == -1 || i < first) then
            first = i
            firstStr = str
        end
    end
    if first == -1 then return empty
    return { "index": first, "token": firstStr }
end

(prototypeof string).split = stringSplit
function stringSplit(pat, includePat = false)
    var str = this.value
    var parts = []
    var i
    while (i = str.indexOf(pat)) != empty do
        if includePat then
            parts[] = str[0:i + pat.length()]
        else
            parts[] = str[0:i]
        end
        str = str[i + pat.length():-1]
    end
    parts[] = str
    return parts
end

(prototypeof string).splitAny = stringSplitAny
function stringSplitAny(patArray, includePat = false)
    var str = this.value
    var parts = []
    var i
    while (i = str.indexOfAny(patArray)) != empty do
        if includePat then
            parts[] = str[0:i.index] + i.token
        else
            parts[] = str[0:i.index]
        end
        str = str[i.index + i.token.length():-1]
    end
    parts[] = str
    return parts
end

(prototypeof string).isDigits = stringIsDigits
function stringIsDigits()
    for i in 0..this.length() do
        if this.value[i] < 48 || this.value[i] > 58 then
            return false
        end
    end
    return true
end

(prototypeof string).isNumeric = stringIsNumeric
function stringIsNumeric()
    var foundPeriod = false
    for i in 0..this.length() do
        if this.value[i] >= 48 && this.value[i] <= 58 then
            # yay digit!
        else if this.value[i] == '.' then
            # period
            if foundPeriod then return false;
            foundPeriod = true
        else if i == 0 && (this.value[i] == '+' || this.value[i] == '-') && this.length() > 1 then
            # prefix unary
        else
            return false
        end
    end
    return true
end

(prototypeof string).isSpaces = stringIsSpaces
function stringIsSpaces()
    for i in 0..this.length() do
        if this.value[i] != 32 then
            return false
        end
    end
    return true
end

(prototypeof string).repeat = stringRepeat
function stringRepeat(n)
    var str = ""
    for i in 0..n do str += this
    return str
end

(prototypeof string).trimLeft = stringTrimLeft
function stringTrimLeft(arr = [" ", "\t", "\n"])
    var str = this.value

    var trimmed
    do
        trimmed = false
        for tok in arr do
            if str[0:tok.length()] == tok then
                str = str[tok.length():-1]
                trimmed = true
            end
        end
    loop while trimmed

    return str
end

(prototypeof string).trimRight = stringTrimRight
function stringTrimRight(arr = [" ", "\t", "\n"])
    var str = this.value

    var trimmed
    do
        trimmed = false
        for tok in arr do
            if str[-(tok.length() + 1): -1] == tok then
                str = str[0:-(tok.length() + 1)]
                trimmed = true
            end
        end
    loop while trimmed

    return str
end

(prototypeof string).trim = stringTrim
function stringTrim(arr)
    return this.trimLeft(arr).trimRight(arr)
end
